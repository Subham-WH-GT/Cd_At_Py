#Use_case of map function
num_list=[1,2,3,4,5]
def square(n):
    return n*n
return_values=map(square,num_list) #the square function doesnt take explit arguments rather the iterable 
print(list(return_values))         #rather the items of the second argument passed for map function works as argument



#when multiple iterable are passed
def fun_call(n,m):
    return n*m;

my_list=[1,2,3,4,5]
my_tuple=(6,7,8,9,10,10)
ans=map(fun_call,my_list,my_tuple)
print(list(ans))

#Use_case of Lambda function
num_list2=[1,2,4]
ans_got=map(lambda x:x*2,num_list2) #lambda x:x*2 this expression--> lamda function takes argument (x) and returns x*2
print(list(ans_got))

#Use_case of filter() function

#Example-->1 (To filter all even number from a list of 10 integers)
int_list=[1,2,3,4,5,6,7,8,9,10]
got_list=list(filter(lambda x:x%2==0,int_list))
print(got_list)

# List of tuples representing (name, age)
people = [("Alice", 25), ("Bob", 30), ("Charlie", 22), ("David", 40)]

# Filtering people above the age of 25
people_allowed=list(filter(lambda items:items[1]>25,people))
print(people_allowed)
